//
//  main.c
//  CS50
//
//  Created by Jacob Hamfeldt Kold on 10/03/2017.
//  Copyright Â© 2017 Jacob Hamfeldt Kold. All rights reserved.
//

/**
 * hello7_mouse.c - the sprite follows the cursor, or is chased if you click
 */


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_timer.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_surface.h>
#define WINDOW_WIDTH (640)
#define WINDOW_HEIGHT (480)

// speed in pixels/second
#define SPEED (300)
#define SPEED_evil_smiley (300)

int main(void)
{
    // attempt to initialize graphics and timer system
    if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_TIMER) != 0)
    {
        printf("error initializing SDL: %s\n", SDL_GetError());
        return 1;
    }
    
    SDL_Window* win = SDL_CreateWindow("Hello, CS50!",
                                       SDL_WINDOWPOS_CENTERED,
                                       SDL_WINDOWPOS_CENTERED,
                                       WINDOW_WIDTH, WINDOW_HEIGHT,0);
    if (!win)
    {
        printf("error creating window: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }
    
    
    // create a renderer, which sets up the graphics hardware
    Uint32 render_flags = SDL_RENDERER_ACCELERATED;
    SDL_Renderer* rend = SDL_CreateRenderer(win, -1, render_flags);
    if (!rend)
    {
        printf("error creating renderer: %s\n", SDL_GetError());
        SDL_DestroyWindow(win);
        SDL_Quit();
        return 1;
    }
    
    // load the image into memory using SDL_image library function
    SDL_Surface* surface = IMG_Load("resources/hello.png");
    SDL_Surface* surface_evil_smiley = IMG_Load("resources/evil-smiley-face.png");
    SDL_Surface* background_color;
    background_color = SDL_CreateRGBSurface(0,WINDOW_WIDTH,WINDOW_HEIGHT,32,0,0,0,0);
    SDL_FillRect(background_color, NULL, SDL_MapRGB(background_color->format,200,0,0));
    
    if (!surface || !surface_evil_smiley)
    {
        printf("error creating surface\n");
        SDL_DestroyRenderer(rend);
        SDL_DestroyWindow(win);
        SDL_Quit();
        return 1;
    }
    
    // load the image data into the graphics hardware's memory
    SDL_Texture* tex = SDL_CreateTextureFromSurface(rend, surface);
    SDL_Texture* tex_evil_smiley = SDL_CreateTextureFromSurface(rend, surface_evil_smiley);
    SDL_Texture* tex_background = SDL_CreateTextureFromSurface(rend, background_color);
    
    SDL_FreeSurface(surface_evil_smiley);
    if (!tex || !tex_evil_smiley)
    {
        printf("error creating texture: %s\n", SDL_GetError());
        SDL_DestroyRenderer(rend);
        SDL_DestroyWindow(win);
        SDL_Quit();
        return 1;
    }
    
    // struct to hold the position and size of the sprite
    SDL_Rect dest;
    SDL_Rect dest_evil_smiley;
    
    // get and scale the dimensions of texture
    SDL_QueryTexture(tex, NULL, NULL, &dest.w, &dest.h);
    dest.w /= 8;
    dest.h /= 8;
    
    
    // SDL_FreeSurface(surface);
    
    SDL_QueryTexture(tex_evil_smiley, NULL, NULL, &dest_evil_smiley.w, &dest_evil_smiley.h);
    dest_evil_smiley.w /= 12;
    dest_evil_smiley.h /= 12;
    // start sprite in center of screen
    float x_pos = (WINDOW_WIDTH - dest.w) / 2;
    float y_pos = (WINDOW_HEIGHT - dest.h) / 2;
    float x_vel = 0;
    float y_vel = 0;
    
    time_t t;
    srand( time(&t));
    int random_number = rand();
    float x_pos_evil_smiley = 5 + rand() % WINDOW_WIDTH;
    float y_pos_evil_smiley = -10 + WINDOW_HEIGHT - dest_evil_smiley.h;
    float x_vel_evil_smiley = (cos (random_number % 628 / 100)) * (cos (random_number % 628 / 100)) * SPEED_evil_smiley;
    float y_vel_evil_smiley = sin (random_number % 628 / 100) * sin (random_number % 628 / 100) * SPEED_evil_smiley;
    
    // keep track of which inputs are given
    int up = 0;
    int down = 0;
    int left = 0;
    int right = 0;
    
    // set to 1 when window close button is pressed
    int close_requested = 0;
    int draw;
    int collision = 0;
    
    SDL_RenderPresent(rend);
    
    // animation loop
    while (!close_requested)
    {
        // process events
        SDL_Event event;
        while (SDL_PollEvent(&event))
        {
            if (event.type == SDL_QUIT)
            {
                close_requested = 1;
            }
        }
        
        // get cursor position relative to window
        int mouse_x, mouse_y;
        int buttons = SDL_GetMouseState(&mouse_x, &mouse_y);
        
        // determine velocity toward mouse
        int target_x = mouse_x - dest.w / 2;
        int target_y = mouse_y - dest.h / 2;
        float delta_x = target_x - x_pos;
        float delta_y = target_y - y_pos;
        float distance = sqrt(delta_x * delta_x + delta_y * delta_y);
        
        // prevent jitter
        if (distance < 5)
        {
            x_vel = y_vel = 0;
        }
        else
        {
            x_vel = delta_x * SPEED / distance;
            y_vel = delta_y * SPEED / distance;
        }
        
        // reverse velocity if mouse button 1 pressed
        if (buttons & SDL_BUTTON(SDL_BUTTON_LEFT))
        {
            x_vel = -x_vel;
            y_vel = -y_vel;
        }
        
        switch (event.type)
        {
            case SDL_QUIT:
                close_requested = 1;
                break;
            case SDL_KEYDOWN:
                switch (event.key.keysym.scancode)
            {
                case SDL_SCANCODE_W:
                case SDL_SCANCODE_UP:
                    up = 1;
                    break;
                case SDL_SCANCODE_A:
                case SDL_SCANCODE_LEFT:
                    left = 1;
                    break;
                case SDL_SCANCODE_S:
                case SDL_SCANCODE_DOWN:
                    down = 1;
                    break;
                case SDL_SCANCODE_D:
                case SDL_SCANCODE_RIGHT:
                    right = 1;
                    break;
            }
                break;
            case SDL_KEYUP:
                switch (event.key.keysym.scancode)
            {
                case SDL_SCANCODE_W:
                case SDL_SCANCODE_UP:
                    up = 0;
                    break;
                case SDL_SCANCODE_A:
                case SDL_SCANCODE_LEFT:
                    left = 0;
                    break;
                case SDL_SCANCODE_S:
                case SDL_SCANCODE_DOWN:
                    down = 0;
                    break;
                case SDL_SCANCODE_D:
                case SDL_SCANCODE_RIGHT:
                    right = 0;
                    break;
            }
                break;
        }
        
        if (up && !down) y_vel = -SPEED;
        if (down && !up) y_vel = SPEED;
        if (left && !right) x_vel = -SPEED;
        if (right && !left) x_vel = SPEED;
        
        // update positions
        x_pos += x_vel / 60;
        y_pos += y_vel / 60;
        x_pos_evil_smiley += x_vel_evil_smiley / 60;
        y_pos_evil_smiley += y_vel_evil_smiley / 60;
        
        // collision detection with bounds
        if (x_pos <= 0) x_pos = 0;
        if (y_pos <= 0) y_pos = 0;
        if (x_pos >= WINDOW_WIDTH - dest.w) x_pos = WINDOW_WIDTH - dest.w;
        if (y_pos >= WINDOW_HEIGHT - dest.h) y_pos = WINDOW_HEIGHT - dest.h;
        
        if (x_pos_evil_smiley < 0) x_vel_evil_smiley *= -1;
        if (x_pos_evil_smiley > WINDOW_WIDTH - dest_evil_smiley.w) x_vel_evil_smiley *= -1;
        if (y_pos_evil_smiley > WINDOW_HEIGHT - dest_evil_smiley.h) y_vel_evil_smiley *= -1;
        if (y_pos_evil_smiley < 0) y_vel_evil_smiley *= -1;
        
        // CS50 colliding with evil smiley
        if (y_pos_evil_smiley + dest_evil_smiley.h > y_pos && y_pos_evil_smiley < y_pos + dest.h)
        {
            if (x_pos_evil_smiley + dest_evil_smiley.w > x_pos && x_pos_evil_smiley < x_pos) collision = 1;
            if (x_pos_evil_smiley + dest_evil_smiley.w > x_pos + dest.w && x_pos_evil_smiley < x_pos + dest.w) collision = 1;
        }
        
        if (x_pos_evil_smiley + dest_evil_smiley.w > x_pos && x_pos_evil_smiley < x_pos + dest.w)
        {
            if (y_pos_evil_smiley + dest_evil_smiley.h > y_pos && y_pos_evil_smiley < y_pos) collision = 1;
            if (y_pos_evil_smiley + dest_evil_smiley.h > y_pos + dest.h && y_pos_evil_smiley < y_pos + dest.h) collision = 1;
        }
        
        
        // set the positions in the struct
        dest.y = (int) y_pos;
        dest.x = (int) x_pos;
        
        dest_evil_smiley.y = y_pos_evil_smiley;
        dest_evil_smiley.x = x_pos_evil_smiley;
        
        // clear the window
        SDL_RenderClear(rend);
        
        // draw the image to the window
        SDL_RenderCopy(rend, tex_background, NULL, &dest);
        SDL_RenderCopy(rend, tex, NULL, &dest);
        SDL_RenderCopy(rend, tex_evil_smiley, NULL, &dest_evil_smiley);
        //  SDL_FillRect(background_color, NULL, SDL_MapRGB(background_color->format,100,100,244));
        
        //   SDL_RenderPresent(rend);
        SDL_RenderPresent(rend);
        
        // wait 1/60th of a second
        SDL_Delay(1000/60);
        
        if (collision == 1)
        {
            SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_INFORMATION,
                                     "Game Over",
                                     "You lost the game and you are a big loser, even you mom thinks so",
                                     win);
            
            close_requested = 1;
        }
        
    }
    
    // clean up resources before exiting
    SDL_FreeSurface(surface);
    SDL_DestroyTexture(tex);
    SDL_DestroyRenderer(rend);
    SDL_DestroyWindow(win);
    SDL_Quit();
}
